// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client"  // ESM-first generator
  engineType = "client"         // No rust engines
  output     = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  USER
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum VariantAttributeType {
  COLOR
  SIZE
  STORAGE
  MEMORY
  PROCESSOR
  MATERIAL
  CAPACITY
  MODEL
  DIMENSION
  FEATURE
}

// Models
model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  role      UserRole   @default(USER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  password  String?

  // Session management fields
  refreshToken   String?
  tokenVersion   Int      @default(0)
  
  // Optional fields for future extensibility
  avatar    String?
  lastLogin DateTime?
  
  @@map("users")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  logoUrl     String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products    Product[]

  @@map("brands")
}

model Product {
  id               String        @id @default(cuid())
  name             String
  slug             String        @unique
  description      String?
  shortDescription String?
  brandId          String
  categoryId       String
  basePrice        Decimal       @db.Decimal(10, 2)
  status           ProductStatus @default(ACTIVE)
  featured         Boolean       @default(false)
  metaTitle        String?
  metaDescription  String?
  fabricFit        String?
  careInstructions String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  brand            Brand                   @relation(fields: [brandId], references: [id], onDelete: Restrict)
  category         Category                @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  variants         ProductVariant[]
  images           ProductImage[]
  specifications   ProductSpecification[]

  @@map("products")
}

model ProductVariant {
  id                 String               @id @default(cuid())
  productId          String
  sku                String               @unique
  name               String
  slug               String               @unique
  price              Decimal              @db.Decimal(10, 2)
  compareAtPrice     Decimal?             @db.Decimal(10, 2)
  costPrice          Decimal?             @db.Decimal(10, 2)
  stock              Int                  @default(0)
  lowStockThreshold  Int                  @default(5)
  trackInventory     Boolean              @default(true)
  isActive           Boolean              @default(true)
  isDefault          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  // Relations
  product            Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes         VariantAttribute[]
  images             ProductImage[]

  @@map("product_variants")
}

model VariantAttribute {
  id        String               @id @default(cuid())
  variantId String
  type      VariantAttributeType
  name      String
  value     String
  hexColor  String?
  sortOrder Int                  @default(0)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  // Relations
  variant   ProductVariant       @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([variantId, type])
  @@map("variant_attributes")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String?
  variantId String?
  url       String
  altText   String
  sortOrder Int      @default(0)
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductSpecification {
  id        String   @id @default(cuid())
  productId String
  name      String
  value     String
  iconUrl   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specifications")
}
